REST = REpresentational State Transfer
which is the lightwieght approach for communicating between applications
REST is language independent
rest can use any data format
REST calls can be made over HTTP

JSON = JavaScript Object Notation
lightweight data format for storing and communicating data

POST = crete a new entity
GET = read a list of entities or single entity
PUT = Update an existing entity
DELETE = delte an existing entity

HTTP Request Message
- Request line: the HTTP command
- Header variables: requested metadata
- message body: contents of message

Status Codes:
100-199 INformational
200-299 Successful
300-399 Redirection
400-499 Client Error
500-599 Server Error

401 Authentication Required
404 File Not found
500 Internal Server Error

MIME = Multipurpose Internet Mail-Extension

@RestController sets the right response adapt for the HTTP protocol

Data Binding is the process of converting JSON data to a JAva POJO
Serialization is a synonym
Data Binding in Spring is made with Jackson which is automatically included
Jackson just call the setters method of the class to translate from json to Java POJO
From Java POJO to JSON, jackson uses getters
This convertion happens automatically if everything is set in the right way

path variable is when there are curly brakets in the path and we can use that variable in the code
/api/sutdents/{studentsID}
to use it in the code, use @PathVariable for the argument of the function
notice that the text inside the brakets and the name of the variable must be the same

@PostConstruct is called just once after initialization of the bean properties.

To handle exceptions:
- create a throw method for the (eventually custom) exception 
- create a custom exception if needed
- create an error class that will be inserted in the exception handler
- create an exception handler as method in the class that will throw the error
  it must return "ResponseEntity<>" with the error class defined
  here you can define with settters: the status, the messages and the timestamps
  use the annotation @ExceptionHandler for this method

@ControllerAdvice is a notation used in Spring.3x for handling global exceptions

It's a bad practice to insert in the endpoint the actions. We should use the http actions.

Service Facade design patter is used to implement a serivece layer
it is useful because it is an intermediate layer for custom business logic
integrate data from multiple sources
it's a best practice to have a service layer
@Service annotation for this layer

Another best practice is to apply transactional boundaries at the service layer
it's the service layer's responsability to manage transaction boundaries
we are talking about where we should use the @Transactional annotation

It's interesting the fact that we can use curl with different flags:
-H 'Content-Type: application/json'
-d '{"firstName":"virgo","lastName":"Vergo","email":"virgo@gmail.com"}
-X POST
The previous command (curl) with all the previous flags was an example about a POST method

@RequestBody to get a data from the body of the request message

With Spring JPA is possible to create a sort of template where you get all the CRUD operations even 
for all the classes. The only things you need to change are:
- the entity class
- the primary key
In practice, you need to create an interface like the following one:
public interface EmployeeRepository extends JpaRepository<Employee, Integer>{}
you don't need to write anything inside the body

Spring boot Rest is a smart way to create easy endpoints (put, get, delete, post etc.).
it needs JpaRepository and from that it can compute all the CRUD operations
The endpoints will have the name of the class with:
- the first letter lower case
- an extra "s" at the end (plural)
in this way we don't need anymore the service and controller layers!!!
We just need:
- the dao
- the entity 
- the spring boot rest inside the pom

You can also specify the base of the url for the Spring boot REST. You can do it in the application.properties:
spring.data.rest.base-path=/magic-api

notice we can also specify the sorting by:
http://localhost:8080/magic-api/employees?sort=lastName,desc

If the plural is different from just adding a "s", we can use the annotation:
@RepositoryRestResource(path=members")
 







